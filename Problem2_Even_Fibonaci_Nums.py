# Problem2
# Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# Considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def even_fibonachi_sum(limit):
    seq = [0, 1, 1, 2]  # prob shouldn't have to hard code this
    x = 1
    while x < limit:
        # print(seq[-2::1])
        seq.append(sum(seq[-2::1]))
        x = seq[-1]
    even = [a for a in seq if a % 2 == 0]
    return sum(even)

# print(even_fibonachi_sum(100))


def even_fibonachi_sum2(limit):
    seq = []
    len = 0
    num = 0
    while num < limit:
        if len <= 1:
            seq.append(len)
        else:
            seq.append(sum(seq[-2::1]))
        len = len+1
        num = seq[-1]

    print(seq)
    even = [a for a in seq if a % 2 == 0 and a < limit]
    # when is best to remove the last function?
    return sum(even)

print(even_fibonachi_sum2(100))

#
#
#  can  so recursively - this is a bit trippy, and I think it's slower...
def gen_seq(length):
    if(length <= 1):
        return length
    else:
        return gen_seq(length-1) + gen_seq(length-2)


def even_fibonachi_sum_rec(limit):
    seq = []
    len = 0
    num = 0
    while num < limit:
        seq.append(gen_seq(len))
        len = len + 1
        num  = seq[-1]

    print(seq)
    even = [a for a in seq if a % 2 == 0 and a < limit]
    return sum(even)

print(even_fibonachi_sum_rec(100))
